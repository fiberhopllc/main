
define(['durandal/system','knockout'],function(system,ko){var binder,insufficientInfoMessage='Insufficient Information to Bind',unexpectedViewMessage='Unexpected View Type',bindingInstructionKey='durandal-binding-instruction',koBindingContextKey='__ko_bindingContext__';function normalizeBindingInstruction(result){if(result===undefined){return{applyBindings:true};}
if(system.isBoolean(result)){return{applyBindings:result};}
if(result.applyBindings===undefined){result.applyBindings=true;}
return result;}
function doBind(obj,view,bindingTarget,data){if(!view||!bindingTarget){if(binder.throwOnErrors){system.error(insufficientInfoMessage);}else{system.log(insufficientInfoMessage,view,data);}
return;}
if(!view.getAttribute){if(binder.throwOnErrors){system.error(unexpectedViewMessage);}else{system.log(unexpectedViewMessage,view,data);}
return;}
var viewName=view.getAttribute('data-view');try{var instruction;if(obj&&obj.binding){instruction=obj.binding(view);}
instruction=normalizeBindingInstruction(instruction);binder.binding(data,view,instruction);if(instruction.applyBindings){system.log('Binding',viewName,data);ko.applyBindings(bindingTarget,view);}else if(obj){ko.utils.domData.set(view,koBindingContextKey,{$data:obj});}
binder.bindingComplete(data,view,instruction);if(obj&&obj.bindingComplete){obj.bindingComplete(view);}
ko.utils.domData.set(view,bindingInstructionKey,instruction);return instruction;}catch(e){e.message=e.message+';\nView: '+viewName+";\nModuleId: "+system.getModuleId(data);if(binder.throwOnErrors){system.error(e);}else{system.log(e.message);}}}
return binder={binding:system.noop,bindingComplete:system.noop,throwOnErrors:false,getBindingInstruction:function(view){return ko.utils.domData.get(view,bindingInstructionKey);},bindContext:function(bindingContext,view,obj,dataAlias){if(obj&&bindingContext){bindingContext=bindingContext.createChildContext(obj,typeof(dataAlias)==='string'?dataAlias:null);}
return doBind(obj,view,bindingContext,obj||(bindingContext?bindingContext.$data:null));},bind:function(obj,view){return doBind(obj,view,obj,obj);}};});